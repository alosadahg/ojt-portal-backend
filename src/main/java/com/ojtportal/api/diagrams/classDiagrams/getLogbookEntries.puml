@startuml
left to right direction
skinparam linetype ortho

class LogbookController << RestController >> {
  - logbookService: LogbookService
  + getAllEntries(String, UserPrincipal): ResponseEntity<List<LogbookEntry>>
  + approveLogbook(int, String, UserPrincipal): ResponseEntity<String>
  + rejectLogbook(int, String, UserPrincipal): ResponseEntity<String>
  + updateLogbookEntry(LogbookEntryDTO, UserPrincipal): ResponseEntity<String>
  + addLogbookEntry(LogbookEntryDTO, UserPrincipal): ResponseEntity<String>
  + getSupervisorLogbooks(String, UserPrincipal): ResponseEntity<List<LogbookEntry>>
}
class LogbookEntry << Entity >> {
  - remarks: String
  - totalHrs: double
  - timeout: LocalDateTime
  - visibility: RecordVisibility
  - ojtrecord: OjtRecord
  - activities: String
  - status: LogbookStatus
  - timein: LocalDateTime
  - entryId: Integer
  - tasks: List<Task>
  - skills: List<Skill>
  + equals(Object): boolean
  + setEntryId(Integer): void
  + setTimeout(LocalDateTime): void
  # canEqual(Object): boolean
  + setRemarks(String): void
  + hashCode(): int
  + getEntryId(): Integer
  + setVisibility(RecordVisibility): void
  + getTimein(): LocalDateTime
  + getTimeout(): LocalDateTime
  + getOjtrecord(): OjtRecord
  + setSkills(List<Skill>): void
  + getSkills(): List<Skill>
  + getStatus(): LogbookStatus
  + getTotalHrs(): double
  + setTasks(List<Task>): void
  + setOjtrecord(OjtRecord): void
  + getTasks(): List<Task>
  + setTimein(LocalDateTime): void
  + getActivities(): String
  + setTotalHrs(double): void
  + setActivities(String): void
  + setStatus(LogbookStatus): void
  + getVisibility(): RecordVisibility
  + getRemarks(): String
  - getHoursRendered(LocalDateTime, LocalDateTime): double
  + toString(): String
}
interface LogbookEntryRepo << Repository>> {
  + findByOjtrecord_Supervisor_User_Email(String): List<LogbookEntry>
  + findByOjtrecord_RecordNo(String): List<LogbookEntry>
  + findByOjtrecord_Student_User_Email(String): List<LogbookEntry>
  + findByTimein(LocalDateTime): LogbookEntry
}
class LogbookService << Service >> {
  - ojtRecordRepo: OjtRecordRepo
  - studentTrainingPlanRepo: StudentTrainingPlanRepo
  - skillTrendRepo: SkillTrendRepo
  - logbookEntryRepo: LogbookEntryRepo
  - studentTaskRepo: StudentTaskRepo
  - skillService: SkillService
  - studentSkillProficiencyRepo: StudentSkillProficiencyRepo
  - emailService: EmailService
  - skillRepo: SkillRepo
  - taskRepo: TaskRepo
  - studentRepo: StudentRepo
  + getSupervisorLogbooks(String): List<LogbookEntry>
  + addLogbookEntry(LogbookEntryDTO, String): String
  + getStudentLogbook(String): List<LogbookEntry>
  - validateTimeAndCheckOverlap(LocalDateTime, LocalDateTime, ZonedDateTime, OjtRecord): String?
  + updateLogbookEntry(LogbookEntryDTO, String): String
  + rejectLogbookEntry(int, String, String): String
  + approveLogbookEntry(int, String, String): String
}
class UserPrincipal {
  - email: String
  - password: String
  - uid: long
  - authorities: Collection<GrantedAuthority>
  + getAuthorities(): Collection<GrantedAuthority>
  + getUid(): long
  + getEmail(): String
  + builder(): UserPrincipalBuilder
  + getPassword(): String
  + isCredentialsNonExpired(): boolean
  + isAccountNonExpired(): boolean
  + isEnabled(): boolean
  + getUsername(): String
  + isAccountNonLocked(): boolean
}

LogbookController  -[#595959,dashed]->  LogbookEntry
LogbookController  -[#595959,dashed]->  LogbookService
LogbookController  -[#595959,dashed]->  UserPrincipal
LogbookEntryRepo   -[#595959,dashed]->  LogbookEntry
LogbookService     -[#595959,dashed]->  LogbookEntry      : "«create»"
LogbookService     -[#595959,dashed]->  LogbookEntryRepo
@enduml